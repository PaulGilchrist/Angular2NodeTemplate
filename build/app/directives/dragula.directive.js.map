{"version":3,"sources":["app/directives/dragula.directive.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAAuE,eAAe,CAAC,CAAA;AACvF,gCAA6B,6BAA6B,CAAC,CAAA;AAQ3D;IAME,iBAAoB,EAAc,EAAU,cAA8B;QAAtD,OAAE,GAAF,EAAE,CAAY;QAAU,mBAAc,GAAd,cAAc,CAAgB;QACxE,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC,aAAa,CAAC;IACpC,CAAC;IAED,0BAAQ,GAAR;QAAA,iBAuBC;QAtBC,yBAAyB;QACzB,IAAI,GAAG,GAAG,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAC7C,IAAI,UAAU,GAAG;YACf,EAAE,CAAC,CAAC,KAAI,CAAC,YAAY,CAAC,CAAC,CAAC;gBACtB,EAAE,CAAC,CAAC,KAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;oBACtB,KAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,KAAI,CAAC,YAAY,CAAC,CAAC;gBAC5C,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACN,KAAI,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,KAAI,CAAC,YAAY,CAAC,CAAC;gBAC1C,CAAC;YACH,CAAC;QACH,CAAC,CAAC;QACF,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;YACR,IAAI,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,CAAC;YACvB,UAAU,EAAE,CAAC;YACb,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QAC7C,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC;gBACnB,UAAU,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC;aAC7B,CAAC,CAAC;YACH,UAAU,EAAE,CAAC;YACb,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;QAChD,CAAC;IACH,CAAC;IAED,6BAAW,GAAX,UAAY,OAA2C;QACrD,iDAAiD;QACjD,wBAAwB;QACxB,EAAE,CAAC,CAAC,OAAO,IAAI,OAAO,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC;YACvC,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;gBACf,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;oBACtB,IAAI,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC,aAAa,CAAC,CAAC;oBAClF,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,UAAU,EAAE,CAAC,EAAE,OAAO,CAAC,cAAc,CAAC,CAAC,YAAY,CAAC,CAAC;gBAChF,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACN,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC,YAAY,CAAC,CAAC;gBAC7D,CAAC;YACH,CAAC;QACH,CAAC;IACH,CAAC;IA/CD;QAAC,YAAK,CAAC,SAAS,CAAC;;wCAAA;IACjB;QAAC,YAAK,EAAE;;iDAAA;IALV;QAAC,gBAAS,CAAC;YACT,QAAQ,EAAE,WAAW;SACtB,CAAC;;eAAA;IAkDF,cAAC;AAAD,CAjDA,AAiDC,IAAA;AAjDY,eAAO,UAiDnB,CAAA","file":"app/directives/dragula.directive.js","sourcesContent":["import {Directive,Input,ElementRef,OnInit,OnChanges,SimpleChange} from '@angular/core';\r\nimport {DragulaService} from '../services/dragula.service';\r\n\r\n//Must be imported in main.ts;\r\ndeclare var dragula: any;\r\n\r\n@Directive({\r\n  selector: '[dragula]'\r\n})\r\nexport class Dragula implements OnInit, OnChanges {\r\n  @Input('dragula') bag: string;\r\n  @Input() dragulaModel: any;\r\n  private container: any;\r\n  private drake: any;\r\n\r\n  constructor(private el: ElementRef, private dragulaService: DragulaService) {\r\n    this.container = el.nativeElement;\r\n  }\r\n\r\n  ngOnInit() {\r\n    // console.log(this.bag);\r\n    let bag = this.dragulaService.find(this.bag);\r\n    let checkModel = () => {\r\n      if (this.dragulaModel) {\r\n        if (this.drake.models) {\r\n          this.drake.models.push(this.dragulaModel);\r\n        } else {\r\n          this.drake.models = [this.dragulaModel];\r\n        }\r\n      }\r\n    };\r\n    if (bag) {\r\n      this.drake = bag.drake;\r\n      checkModel();\r\n      this.drake.containers.push(this.container);\r\n    } else {\r\n      this.drake = dragula({\r\n        containers: [this.container]\r\n      });\r\n      checkModel();\r\n      this.dragulaService.add(this.bag, this.drake);\r\n    }\r\n  }\r\n\r\n  ngOnChanges(changes: {[propName: string]: SimpleChange}) {\r\n    // console.log('dragula.directive: ngOnChanges');\r\n    // console.log(changes);\r\n    if (changes && changes['dragulaModel']) {\r\n      if (this.drake) {\r\n        if (this.drake.models) {\r\n          let modelIndex = this.drake.models.indexOf(changes['dragulaModel'].previousValue);\r\n          this.drake.models.splice(modelIndex, 1, changes['dragulaModel'].currentValue);\r\n        } else {\r\n          this.drake.models = [changes['dragulaModel'].currentValue];\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n"],"sourceRoot":"/source/"}