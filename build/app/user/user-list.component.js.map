{"version":3,"sources":["app/user/user-list.component.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAA0E,eAAe,CAAC,CAAA;AAG1F,6BAA4B,0BAA0B,CAAC,CAAA;AAUvD;IAWI,2BAAmB,YAAyB;QAAzB,iBAAY,GAAZ,YAAY,CAAa;QAVlC,aAAQ,GAAG,IAAI,mBAAY,EAAQ,CAAC;QAMvC,aAAQ,GAAW,WAAW,CAAC;QAC/B,gBAAW,GAAY,KAAK,CAAC;QAC7B,iBAAY,GAAW,EAAE,CAAC;IAEe,CAAC;IAEjD,uCAAW,GAAX;QACI,4EAA4E;QAC5E,6EAA6E;QAC7E,0FAA0F;QAC1F,IAAI,kBAAkB,GAAG,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC;QAC7E,EAAE,CAAC,CAAC,kBAAkB,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;YAChC,CAAC,CAAC,OAAO,CAAC;gBACN,KAAK,EAAE,UAAU;gBACjB,OAAO,EAAE,0BAA0B;gBACnC,kBAAkB,EAAE,UAAU;gBAC9B,iBAAiB,EAAE,YAAY;gBAC/B,SAAS,EAAE,IAAI;gBACf,IAAI,EAAE,eAAe;gBACrB,OAAO,EAAE;oBACL,CAAC,CAAC,IAAI,CAAC,kBAAkB,EAAE,UAAU,IAAS;wBAC1C,kCAAkC;wBAClC,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;oBACzB,CAAC,CAAC,CAAC;oBACH,CAAC,CAAC,KAAK,CAAC;wBACJ,KAAK,EAAE,QAAQ;wBACf,OAAO,EAAE,oCAAoC;wBAC7C,SAAS,EAAE,cAAc;wBACzB,iBAAiB,EAAE,IAAI;qBAC1B,CAAC,CAAC;gBACP,CAAC;gBACD,MAAM,EAAE;oBACJ,CAAC,CAAC,KAAK,CAAC;wBACJ,KAAK,EAAE,WAAW;wBAClB,OAAO,EAAE,oCAAoC;wBAC7C,SAAS,EAAE,cAAc;wBACzB,iBAAiB,EAAE,IAAI;qBAC1B,CAAC,CAAC;gBACP,CAAC;aACJ,CAAC,CAAC;QACP,CAAC;IACL,CAAC;IAED,oCAAQ,GAAR;QACI,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;QACnB,IAAI,CAAC,QAAQ,EAAE,CAAC;QAChB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;IAC3B,CAAC;IAEM,sCAAU,GAAjB,UAAkB,WAAmB;QACjC,EAAE,CAAC,CAAC,WAAW,KAAK,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;YAChC,uDAAuD;YACvD,IAAI,CAAC,WAAW,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC;QACzC,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,IAAI,CAAC,QAAQ,GAAG,WAAW,CAAC;QAChC,CAAC;IACL,CAAC;IAED,oCAAQ,GAAR;QAAA,iBAMC;QALG,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;QACnB,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE;aAGvB,SAAS,CAAC,UAAA,KAAK,IAAI,OAAA,KAAI,CAAC,MAAM,GAAG,KAAK,EAAnB,CAAmB,EAAE,UAAA,KAAK,IAAI,OAAA,KAAI,CAAC,YAAY,GAAQ,KAAK,EAA9B,CAA8B,CAAC,CAAC;IAC1F,CAAC;IAEM,sCAAU,GAAjB,UAAkB,IAAU;QACxB,sDAAsD;QACtD,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC7B,CAAC;IA3ED;QAAC,aAAM,EAAE;;uDAAA;IANb;QAAC,gBAAS,CAAC;YACP,QAAQ,EAAE,WAAW;YACrB,SAAS,EAAE,CAAC,kCAAkC,CAAC;YAC/C,WAAW,EAAE,mCAAmC;SACnD,CAAC;;yBAAA;IA+EF,wBAAC;AAAD,CA9EA,AA8EC,IAAA;AA9EY,yBAAiB,oBA8E7B,CAAA","file":"app/user/user-list.component.js","sourcesContent":["import { Component, EventEmitter, Input, OnDestroy, OnInit, Output } from '@angular/core';\r\n\r\nimport { User } from '../models/user.model';\r\nimport { UserService } from '../services/user.service';\r\n\r\ndeclare var _: any;\r\ndeclare var $: any;\r\n\r\n@Component({\r\n    selector: 'user-list',\r\n    styleUrls: ['app/user/user-list.component.css'],\r\n    templateUrl: 'app/user/user-list.component.html'\r\n})\r\nexport class UserListComponent implements OnInit, OnDestroy  {\r\n    @Output() onSelect = new EventEmitter<User>();\r\n    id: string;\r\n\r\n    public errorMessage: string;\r\n    public isListOpen: boolean;\r\n    public isBusy: boolean;\r\n    public sortType: string = 'firstName';\r\n    public sortReverse: boolean = false;\r\n    public searchString: string = '';\r\n\r\n    constructor(public _userService: UserService) { }\r\n\r\n    ngOnDestroy(): void {\r\n        //Make sure all the users are saved to the API before leaving this component\r\n        //Look for angular to release a better lifecycle hook than onDestroy for this\r\n        //     Doing this earlier in the lifecycle would allow for leaving the page to be canceled\r\n        var usersRequiringSave = _.where(this._userService.users, { isDirty: true });\r\n        if (usersRequiringSave.length > 0) {\r\n            $.confirm({\r\n                title: 'Confirm!',\r\n                content: 'Save all modified users?',\r\n                confirmButtonClass: 'btn-info',\r\n                cancelButtonClass: 'btn-danger',\r\n                closeIcon: true,\r\n                icon: 'fa fa-warning',\r\n                confirm: function() {\r\n                    _.each(usersRequiringSave, function (user: any) {\r\n                        //Simulate saving the user changes\r\n                        user.isDirty = false;\r\n                    });\r\n                    $.alert({\r\n                        title: 'Saved!',\r\n                        content: 'All modified users have been saved',\r\n                        autoClose: 'confirm|1000',\r\n                        backgroundDismiss: true\r\n                    });\r\n                },\r\n                cancel: function() {\r\n                    $.alert({\r\n                        title: 'Canceled!',\r\n                        content: 'Modified users have not been saved',\r\n                        autoClose: 'confirm|1000',\r\n                        backgroundDismiss: true\r\n                    });\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.isBusy = true;\r\n        this.getUsers();\r\n        this.isListOpen = true;\r\n    }\r\n\r\n    public changeSort(newSortType: string) {\r\n        if (newSortType === this.sortType) {\r\n            //clicking the same column twice toggles the sort order\r\n            this.sortReverse = !this.sortReverse;\r\n        } else {\r\n            this.sortType = newSortType;\r\n        }\r\n    }\r\n\r\n    getUsers(): void {\r\n        this.isBusy = true;\r\n        this._userService.getUsers()\r\n            //We are not going to store the users in this component but rather leave them in the service itself\r\n            //     This means we are subscribing not to get the data, but to know when the service has the data\r\n            .subscribe(users => this.isBusy = false, error => this.errorMessage = <any>error);\r\n    }\r\n\r\n    public selectUser(user: User): void {\r\n        //Bubble up to the parent that a new user was selected\r\n        this.onSelect.emit(user);\r\n    }\r\n\r\n}"],"sourceRoot":"/source/"}