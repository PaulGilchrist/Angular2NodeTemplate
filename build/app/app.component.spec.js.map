{"version":3,"sources":["app/app.component.spec.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,wBAA+B,uBAAuB,CAAC,CAAA;AACvD,iCAAmB,2BAA2B,CAAC,CAAA;AAE/C,8BAA6B,iBAAiB,CAAC,CAAA;AAE/C,8BAA8B;AAC9B,eAAe;AACf,QAAQ,CAAC,YAAY,EAAE;IACnB,EAAE,CAAC,2BAA2B,EAAE;QAC5B,MAAM,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;IAC9C,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC;AAEH,QAAQ,CAAC,cAAc,EAAE;IACrB,UAAU,CAAC;QACP,iBAAO,CAAC,sBAAsB,CAAC;YAC3B,YAAY,EAAE,CAAC,4BAAY,CAAC;SAC/B,CAAC,CAAC;QACH,iBAAO,CAAC,iBAAiB,CAAC,4BAAY,EAAE;YACpC,GAAG,EAAE;gBACD,QAAQ,EAAE,qCAAqC;aAElD;SACJ,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;IACH,EAAE,CAAC,8BAA8B,EAAE,eAAK,CAAC;QACrC,iBAAO,CAAC,iBAAiB,EAAE,CAAC,IAAI,CAAC;YAC7B,IAAI,OAAO,GAAG,iBAAO,CAAC,eAAe,CAAC,4BAAY,CAAC,CAAC;YACpD,MAAM,CAAC,OAAO,CAAC,iBAAiB,YAAY,4BAAY,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,4BAA4B,CAAC,CAAC;QACvG,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC,CAAC;IACJ,EAAE,CAAC,iCAAiC,EAAE,eAAK,CAAC;QACxC,iBAAO,CAAC,iBAAiB,EAAE,CAAC,IAAI,CAAC;YAC7B,IAAI,OAAO,GAAG,iBAAO,CAAC,eAAe,CAAC,4BAAY,CAAC,CAAC;YACpD,OAAO,CAAC,aAAa,EAAE,CAAC;YACxB,IAAI,GAAG,GAAG,OAAO,CAAC,YAAY,CAAC,KAAK,CAAC,UAAA,EAAE,IAAI,OAAA,EAAE,CAAC,IAAI,KAAK,KAAK,EAAjB,CAAiB,CAAC,CAAC,aAAa,CAAC,CAAE,WAAW;YACzF,GAAG,GAAG,OAAO,CAAC,YAAY,CAAC,KAAK,CAAC,qBAAE,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,aAAa,CAAC,CAAY,YAAY;YACtF,MAAM,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,sBAAsB,EAAE,wDAAwD,CAAC,CAAC;QACpH,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC,CAAC;AACR,CAAC,CAAC,CAAC","file":"app/app.component.spec.js","sourcesContent":["/* tslint:disable:no-unused-variable */\r\nimport { async, TestBed } from '@angular/core/testing';\r\nimport { By } from '@angular/platform-browser';\r\n\r\nimport { AppComponent } from './app.component';\r\n\r\n////////  SPECS  /////////////\r\n/// Delete this\r\ndescribe('Smoke test', () => {\r\n    it('should run a passing test', () => {\r\n        expect(true).toEqual(true, 'should pass');\r\n    });\r\n});\r\n\r\ndescribe('AppComponent', () => {\r\n    beforeEach(() => {\r\n        TestBed.configureTestingModule({\r\n            declarations: [AppComponent],\r\n        });\r\n        TestBed.overrideComponent(AppComponent, {\r\n            set: {\r\n                template: '<div>Overridden template here</div>'\r\n                // ...\r\n            }\r\n        });\r\n    });\r\n    it('Should instantiate component', async(() => {\r\n        TestBed.compileComponents().then(() => {\r\n            let fixture = TestBed.createComponent(AppComponent);\r\n            expect(fixture.componentInstance instanceof AppComponent).toBe(true, 'should create AppComponent');\r\n        });\r\n    }));\r\n    it('Should have expected <div> text', async(() => {\r\n        TestBed.compileComponents().then(() => {\r\n            let fixture = TestBed.createComponent(AppComponent);\r\n            fixture.detectChanges();\r\n            let div = fixture.debugElement.query(el => el.name === 'div').nativeElement;  // it works\r\n            div = fixture.debugElement.query(By.css('div')).nativeElement;            // preferred\r\n            expect(div.innerText).toMatch(/Overridden template/i, '<div> should say something about \"Overridden template\"');\r\n        });\r\n    }));\r\n});\r\n\r\n"],"sourceRoot":"/source/"}