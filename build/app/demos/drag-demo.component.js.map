{"version":3,"sources":["app/demos/drag-demo.component.ts"],"names":[],"mappings":"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","file":"app/demos/drag-demo.component.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { DragulaService } from '../services/dragula.service';\r\n\r\ndeclare var $:any;\r\ndeclare var _:any;\r\n\r\n//We only put interfaces in the models folder when they are reused across components\r\nexport interface DragObject { id: number, text: string, allowMove: boolean }\r\n\r\n@Component({\r\n    selector: 'drag-demo',\r\n    styleUrls: ['app/demos/drag-demo.component.css'],\r\n    viewProviders: [DragulaService],\r\n    templateUrl: 'app/demos/drag-demo.component.html'\r\n})\r\nexport class DragDemoComponent {\r\n    public many: Array<string> = ['The', 'possibilities', 'are', 'endless!'];\r\n    public many2: Array<string> = ['Explore', 'them'];\r\n    list1: DragObject[] = [\r\n        { id: 0, text: 'You can drag and drop these elements between these two containers', allowMove: true },\r\n        { id: 1, text: 'There\\'s also the possibility of moving elements around in the same container, changing their position', allowMove: true },\r\n        { id: 2, text: 'A drop event is fired whenever an element is dropped anywhere other than its origin', allowMove: true },\r\n        { id: 3, text: 'The over event fires when you drag something over a container, and out fires when you drag it away from the container', allowMove: true }\r\n    ]\r\n    list2: DragObject[] = [\r\n        { id: 4, text: 'There are also events such as cancel, cloned, drag, dragend, remove, shadow, dropModel, and removeModel', allowMove: true },\r\n        { id: 5, text: 'Make sure to check out the dragula and ng2-dragula documentation on GitHub!', allowMove: true },\r\n        { id: 6, text: 'Don\\'t move me!!!', allowMove: false },\r\n    ]\r\n\r\n    constructor(private dragulaService: DragulaService) { }\r\n\r\n    ngOnInit(): void {\r\n        var _self = this;\r\n        this.dragulaService.setOptions('dragContainer', {\r\n            isContainer: function (el: any) { return false; }, // only elements in drake.containers will be taken into account\r\n            moves: function (el: any, source: any, handle: any, sibling: any) {\r\n                //Elements are always draggable by default\r\n                return true;\r\n            },\r\n            accepts: function (el: any, target: any, source: any, sibling: any) {\r\n                //Elements can be dropped in any of the `containers` by default\r\n                let itemId: number = parseInt($(el).attr('id'));\r\n                let item = _.findWhere(_self.list1, {id: itemId}) || _.findWhere(_self.list2, {id: itemId});\r\n                if(!item.allowMove) {\r\n                    return false;\r\n                } else {\r\n                    return true;\r\n                }\r\n            },\r\n            invalid: function (el: any, handle: any) { return false; }, // don't prevent any drags from initiating by default\r\n            direction: 'vertical', // Y axis is considered when determining where an element would be dropped\r\n            copy: false, // elements are moved by default, not copied\r\n            copySortSource: true, // elements in copy-source containers can be reordered\r\n            revertOnSpill: true, // spilling will put the element back where it was dragged from, if this is true\r\n            removeOnSpill: false,  // spilling will `.remove` the element, if this is true\r\n            mirrorContainer: document.body, // set the element that gets mirror elements appended\r\n            ignoreInputTextSelection: true // allows users to select input text, see details below\r\n        });\r\n        //Look at DragulaService for additional events to subscribe to\r\n        //drag, dragend, drop cancel, remove, shadow, over, out, cloned\r\n        this.dragulaService.over.subscribe((value: any) => {\r\n            this.onOver(value.slice(1));\r\n        });\r\n        this.dragulaService.out.subscribe((value: any) => {\r\n            this.onOut(value.slice(1));\r\n        });\r\n    }\r\n\r\n    private onOver(args: any): void {\r\n        //container is the source not the target container\r\n        let [el, container, source] = args;\r\n        let itemId: number = parseInt($(el).attr('id'));\r\n        let item = _.findWhere(this.list1, {id: itemId}) || _.findWhere(this.list2, {id: itemId});\r\n        if(container != source) {\r\n            if(item.allowMove) {\r\n                $(container).addClass('drag-success');\r\n            } else {\r\n                $(container).addClass('drag-error');\r\n            }\r\n        }\r\n    }\r\n\r\n    private onOut(args: any): void {\r\n        let [el, container, source] = args;\r\n        $(container).removeClass('drag-success drag-error');\r\n    }\r\n\r\n    private removeObject(list:Array<any>, objToRemove:any): void {\r\n         //Finds the object in the list with the matching id and removes it\r\n         for (let i =0; i < list.length; i++) {\r\n            if (list[i].id === objToRemove.id) {\r\n                list.splice(i,1);\r\n                break;\r\n            }\r\n        }\r\n     }\r\n\r\n}"],"sourceRoot":"/source/"}