{"version":3,"sources":["app/services/dragula.service.ts"],"names":[],"mappings":"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","file":"app/services/dragula.service.js","sourcesContent":["//https://github.com/bevacqua/dragula#readme\r\nimport {Injectable, EventEmitter} from '@angular/core';\r\n\r\n//Must be imported in main.ts;\r\ndeclare var dragula: any;\r\n\r\n@Injectable()\r\nexport class DragulaService {\r\n  public cancel:      EventEmitter<any> = new EventEmitter();\r\n  public cloned:      EventEmitter<any> = new EventEmitter();\r\n  public drag:        EventEmitter<any> = new EventEmitter();\r\n  public dragend:     EventEmitter<any> = new EventEmitter();\r\n  public drop:        EventEmitter<any> = new EventEmitter();\r\n  public out:         EventEmitter<any> = new EventEmitter();\r\n  public over:        EventEmitter<any> = new EventEmitter();\r\n  public remove:      EventEmitter<any> = new EventEmitter();\r\n  public shadow:      EventEmitter<any> = new EventEmitter();\r\n  public dropModel:   EventEmitter<any> = new EventEmitter();\r\n  public removeModel: EventEmitter<any> = new EventEmitter();\r\n  private events: Array<string> = [\r\n    'cancel',\r\n    'cloned',\r\n    'drag',         //[el, source]\r\n    'dragend',\r\n    'drop',\r\n    'out',\r\n    'over',\r\n    'remove',\r\n    'shadow',\r\n    'dropModel',    //[el, target, source]\r\n    'removeModel'   //[el, source]\r\n  ];\r\n  private bags: Array<any> = [];\r\n\r\n  public add(name: string, drake: any): any {\r\n    let bag = this.find(name);\r\n    if (bag) {\r\n      throw new Error('Bag named: \"' + name + '\" already exists.');\r\n    }\r\n    bag = {\r\n      name: name,\r\n      drake: drake\r\n    };\r\n    this.bags.push(bag);\r\n    if (drake.models) { // models to sync with (must have same structure as containers)\r\n      this.handleModels(name, drake);\r\n    }\r\n    if (!bag.initEvents) {\r\n      this.setupEvents(bag);\r\n    }\r\n    return bag;\r\n  }\r\n\r\n  public find(name: string): any {\r\n    for (var i = 0; i < this.bags.length; i++) {\r\n      if (this.bags[i].name === name) {\r\n        return this.bags[i];\r\n      }\r\n    }\r\n  }\r\n\r\n  public destroy(name: string): void {\r\n    let bag = this.find(name);\r\n    let i = this.bags.indexOf(bag);\r\n    this.bags.splice(i, 1);\r\n    bag.drake.destroy();\r\n  }\r\n\r\n  public setOptions(name: string, options: any) {\r\n    let bag = this.add(name, dragula(options));\r\n    this.handleModels(name, bag.drake);\r\n  }\r\n\r\n  private handleModels(name: string, drake: any) {\r\n    let dragElm: any;\r\n    let dragIndex: number;\r\n    let dropIndex: number;\r\n    let sourceModel: any;\r\n    drake.on('remove', (el: any, source: any) => {\r\n      if (!drake.models) {\r\n        return;\r\n      }\r\n      sourceModel = drake.models[drake.containers.indexOf(source)];\r\n      sourceModel.splice(dragIndex, 1);\r\n      // console.log('REMOVE');\r\n      // console.log(sourceModel);\r\n      this.removeModel.emit([name, el, source]);\r\n    });\r\n    drake.on('drag', (el: any, source: any) => {\r\n      dragElm = el;\r\n      dragIndex = this.domIndexOf(el, source);\r\n    });\r\n    drake.on('drop', (dropElm: any, target: any, source: any) => {\r\n      if (!drake.models || !target) {\r\n        return;\r\n      }\r\n      dropIndex = this.domIndexOf(dropElm, target);\r\n      sourceModel = drake.models[drake.containers.indexOf(source)];\r\n      // console.log('DROP');\r\n      // console.log(sourceModel);\r\n      if (target === source) {\r\n        sourceModel.splice(dropIndex, 0, sourceModel.splice(dragIndex, 1)[0]);\r\n      } else {\r\n        let notCopy = dragElm === dropElm;\r\n        let targetModel = drake.models[drake.containers.indexOf(target)];\r\n        let dropElmModel = notCopy ? sourceModel[dragIndex] : JSON.parse(JSON.stringify(sourceModel[dragIndex]));\r\n\r\n        if (notCopy) {\r\n          sourceModel.splice(dragIndex, 1);\r\n        }\r\n        targetModel.splice(dropIndex, 0, dropElmModel);\r\n        target.removeChild(dropElm); // element must be removed for ngFor to apply correctly\r\n      }\r\n      this.dropModel.emit([name, dropElm, target, source]);\r\n    });\r\n  }\r\n\r\n  private setupEvents(bag: any) {\r\n    bag.initEvents = true;\r\n    let that: any = this;\r\n    let emitter = (type: any) => {\r\n      function replicate () {\r\n        let args = Array.prototype.slice.call(arguments);\r\n        that[type].emit([bag.name].concat(args));\r\n      }\r\n      bag.drake.on(type, replicate);\r\n    };\r\n    this.events.forEach(emitter);\r\n  }\r\n\r\n  private domIndexOf(child: any, parent: any) {\r\n    return Array.prototype.indexOf.call(parent.children, child);\r\n  }\r\n}\r\n\r\n"],"sourceRoot":"/source/"}