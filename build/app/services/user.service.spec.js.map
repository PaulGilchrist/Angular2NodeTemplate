{"version":3,"sources":["app/services/user.service.spec.ts"],"names":[],"mappings":";AAAA,wBAAqC,uBAAuB,CAAC,CAAA;AAC7D,qBAA+B,eAAe,CAAC,CAAA;AAC/C,QAAO,SAAS,CAAC,CAAA;AACjB,iCAAgC,oBAAoB,CAAC,CAAA;AACrD,6BAA4B,gBAAgB,CAAC,CAAA;AAI7C,QAAQ,CAAC,aAAa,EAAE;IACpB,IAAI,WAAgB,CAAC;IACrB,IAAI,KAAa,CAAC;IAClB,UAAU,CAAC;QACP,sBAAY,CAAC,CAAC,qBAAc,EAAE,kCAAe,EAAE,0BAAW,CAAC,CAAC,CAAC;IACjE,CAAC,CAAC,CAAC;IACH,EAAE,CAAC,6DAA6D,EAAE,gBAAM,CAAC,CAAC,0BAAW,CAAC,EAAE,UAAC,OAAY,EAAE,IAAS;QAC5G,OAAO,CAAC,QAAQ,EAAE,CAAC,SAAS,CAAC,UAAC,IAAY;YACtC,KAAK,GAAG,IAAI,CAAC;YACb,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YAC/B,IAAI,EAAE,CAAC;QACX,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC,CAAC;IACJ,EAAE,CAAC,4DAA4D,EAAE,gBAAM,CAAC,CAAC,0BAAW,CAAC,EAAE,UAAC,OAAY;QAChG,8CAA8C;QAC9C,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;IAChD,CAAC,CAAC,CAAC,CAAC;IACJ,EAAE,CAAC,gEAAgE,EAAE,gBAAM,CAAC,CAAC,0BAAW,CAAC,EAAE,UAAC,OAAY,EAAE,IAAS;QAC/G,WAAW,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,UAAC,SAAoB;YAClE,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACjC,IAAI,EAAE,CAAC;QACX,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC,CAAC;AACR,CAAC,CAAC,CAAC","file":"app/services/user.service.spec.js","sourcesContent":["import { addProviders, inject } from '@angular/core/testing';\r\nimport { HTTP_PROVIDERS } from '@angular/http';\r\nimport 'rxjs/Rx';\r\nimport { IdentityService } from './identity.service';\r\nimport { UserService } from './user.service';\r\nimport { Address } from '../models/address.model';\r\nimport { User } from '../models/user.model';\r\n\r\ndescribe('UserService', () => {\r\n    let userService: any;\r\n    let users: User[];\r\n    beforeEach(() => {\r\n        addProviders([HTTP_PROVIDERS, IdentityService, UserService]);\r\n    });\r\n    it('Successfully pulled correct number of users from remote API', inject([UserService], (service: any, done: any) => {\r\n        service.getUsers().subscribe((data: User[]) => {\r\n            users = data;\r\n            expect(users.length).toBe(241);\r\n            done();\r\n        });\r\n    }));\r\n    it('Successfully pulled the correct first user from remote API', inject([UserService], (service: any) => {\r\n        //Assumes the API has already pulled user info\r\n        expect(users[0].firstName).toEqual('Aaron');\r\n    }));\r\n    it('Successfully pulled addresses for a given user from remote API', inject([UserService], (service: any, done: any) => {\r\n        userService.getUserAddresses(users[0]).subscribe((addresses: Address[]) => {\r\n            expect(addresses.length).toBe(2);\r\n            done();\r\n        });\r\n    }));\r\n});\r\n"],"sourceRoot":"/source/"}