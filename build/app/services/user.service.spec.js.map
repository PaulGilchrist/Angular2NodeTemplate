{"version":3,"sources":["app/services/user.service.spec.ts"],"names":[],"mappings":";AAAA,wBAA8E,uBAAuB,CAAC,CAAA;AACtG,qBAA+B,eAAe,CAAC,CAAA;AAC/C,QAAO,SAAS,CAAC,CAAA;AACjB,iCAAgC,oBAAoB,CAAC,CAAA;AACrD,6BAA4B,gBAAgB,CAAC,CAAA;AAI7C,kBAAQ,CAAC,aAAa,EAAE;IACpB,IAAI,WAAgB,CAAC;IACrB,IAAI,KAAa,CAAC;IAClB,6BAAmB,CAAC;QAChB,MAAM,CAAC;YACH,qBAAc;YACd,kCAAe;YACf,0BAAW;SACd,CAAC;IACN,CAAC,CAAC,CAAC;IACH,oBAAU,CAAC,gBAAM,CAAC,CAAC,0BAAW,CAAC,EAAE,UAAC,QAAa;QAC3C,WAAW,GAAG,QAAQ,CAAA;IAC1B,CAAC,CAAC,CAAC,CAAC;IACJ,YAAE,CAAC,6DAA6D,EAAE,UAAS,IAAS;QAChF,WAAW,CAAC,QAAQ,EAAE,CAAC,SAAS,CAAC,UAAC,IAAY;YAC1C,KAAK,GAAG,IAAI,CAAC;YACb,gBAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YAC/B,IAAI,EAAE,CAAC;QACX,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;IACH,YAAE,CAAC,4DAA4D,EAAE;QAC7D,8CAA8C;QAC9C,gBAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;IAChD,CAAC,CAAC,CAAC;IACH,YAAE,CAAC,gEAAgE,EAAE,UAAS,IAAS;QACnF,WAAW,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,UAAC,SAAoB;YAClE,gBAAM,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACjC,IAAI,EAAE,CAAC;QACX,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC","file":"app/services/user.service.spec.js","sourcesContent":["import { describe, expect, beforeEach, it, inject, beforeEachProviders } from '@angular/core/testing';\r\nimport { HTTP_PROVIDERS } from '@angular/http';\r\nimport 'rxjs/Rx';\r\nimport { IdentityService } from './identity.service';\r\nimport { UserService } from './user.service';\r\nimport { Address } from '../models/address.model';\r\nimport { User } from '../models/user.model';\r\n\r\ndescribe('UserService', () => {\r\n    let userService: any;\r\n    let users: User[];\r\n    beforeEachProviders(() => {\r\n        return [\r\n            HTTP_PROVIDERS,\r\n            IdentityService,\r\n            UserService\r\n        ];\r\n    });\r\n    beforeEach(inject([UserService], (_service: any) => {\r\n        userService = _service\r\n    }));\r\n    it('Successfully pulled correct number of users from remote API', function(done: any) {\r\n        userService.getUsers().subscribe((data: User[]) => {\r\n            users = data;\r\n            expect(users.length).toBe(241);\r\n            done();\r\n        });\r\n    });\r\n    it('Successfully pulled the correct first user from remote API', function() {\r\n        //Assumes the API has already pulled user info\r\n        expect(users[0].firstName).toEqual('Aaron');\r\n    });\r\n    it('Successfully pulled addresses for a given user from remote API', function(done: any) {\r\n        userService.getUserAddresses(users[0]).subscribe((addresses: Address[]) => {\r\n            expect(addresses.length).toBe(2);\r\n            done();\r\n        });\r\n    });\r\n});\r\n"],"sourceRoot":"/source/"}