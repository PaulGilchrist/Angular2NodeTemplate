{"version":3,"sources":["app/services/api-user.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAA2B,eAAe,CAAC,CAAA;AAC3C,qBAAwC,eAAe,CAAC,CAAA;AACxD,2BAA2B,iBAAiB,CAAC,CAAA;AAC7C,QAAO,yBACP,CAAC,CAD+B;AAChC,QAAO,sBACP,CAAC,CAD4B;AAC7B,QAAO,sBAAsB,CAAC,CAAA;AAC9B,QAAO,uBAGP,CAAC,CAH6B;AAG9B,4BAAuB,qBAAqB,CAAC,CAAA;AAC7C,iCAAgC,8BAA8B,CAAC,CAAA;AAM/D;IACI,kEAAkE;IAClE,qBAAoB,IAAU,EAAU,gBAAiC;QAArD,SAAI,GAAJ,IAAI,CAAM;QAAU,qBAAgB,GAAhB,gBAAgB,CAAiB;QAEzE,WAAW;QACX,kCAA6B,GAAW,OAAO,CAAC;QAKhD,mBAAmB;QACnB,cAAS,GAAG,oBAAM,CAAC,MAAM,GAAG,QAAQ,CAAC;IATwC,CAAC;IAYvE,8BAAQ,GAAf;QAAA,iBAeC;QAdG,0EAA0E;QAC1E,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,IAAI,CAAC,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,6BAA6B,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC;YAC3F,oBAAoB;YACpB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,wEAAwE,CAAC;iBACxG,GAAG,CAAC,UAAA,GAAG,IAAI,OAAQ,GAAG,CAAC,IAAI,EAAE,EAAlB,CAAkB,CAAC;iBAC9B,EAAE,CAAC,UAAA,IAAI;gBACJ,KAAI,CAAC,KAAK,GAAG,IAAI;oBACjB,KAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,GAAG,EAAE,CAAA,CAAC,iDAAiD;YACxF,CAAC,CAAC;iBACD,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QACjC,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,wCAAwC;YACxC,MAAM,CAAC,uBAAU,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACrC,CAAC;IACL,CAAC;IAEM,sCAAgB,GAAvB,UAAwB,IAAU;QAC9B,sDAAsD;QACtD,+HAA+H;QAC/H,4HAA4H;QAC5H,IAAI,GAAG,GAAW,IAAI,CAAC,SAAS,GAAG,GAAG,GAAG,IAAI,CAAC,EAAE,GAAG,YAAY,CAAC;QAChE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,wEAAwE,CAAC;aAC7F,GAAG,CAAC,UAAA,GAAG,IAAI,OAAW,GAAG,CAAC,IAAI,EAAE,EAArB,CAAqB,CAAC;aACjC,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IACjC,CAAC;IAEO,iCAAW,GAAnB,UAAoB,KAAe;QAC/B,8EAA8E;QAC9E,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QACrB,MAAM,CAAC,uBAAU,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,KAAK,IAAI,cAAc,CAAC,CAAC;IAClE,CAAC;IA9CL;QAAC,iBAAU,EAAE;;mBAAA;IAgDb,kBAAC;AAAD,CA/CA,AA+CC,IAAA;AA/CY,mBAAW,cA+CvB,CAAA","file":"app/services/api-user.service.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Headers, Http, Response } from '@angular/http';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport 'rxjs/add/operator/catch'\r\nimport 'rxjs/add/operator/do'\r\nimport 'rxjs/add/operator/of';\r\nimport 'rxjs/add/operator/map'\r\n\r\n\r\nimport { CONFIG } from '../data/config.data';\r\nimport { IdentityService } from '../services/identity.service';\r\nimport { Address } from '../models/address.model';\r\nimport { User } from '../models/user.model';\r\n\r\n\r\n@Injectable()\r\nexport class UserService {\r\n    //Assumes HTTP_PROVIDERS was added as a provider at a higher level\r\n    constructor(private http: Http, private _identityService: IdentityService) { }\r\n\r\n    //constants\r\n    _maxUserCacheTimeMilliseconds: number = 3600000;\r\n\r\n    //public variables\r\n    public users: User[];\r\n\r\n    //private variables\r\n    _usersUrl = CONFIG.apiUrl + '/users';\r\n    _lastUserGetTime: number; //number of milliseconds elapsed since 1 January 1970 00:00:00 UTC\r\n\r\n    public getUsers(): Observable<User[]> {\r\n        //if the users are less than 1 hour old do not GET them again from the API\r\n        if (!this.users || (this._lastUserGetTime + this._maxUserCacheTimeMilliseconds < Date.now())) {\r\n            //Get users from API\r\n            return this.http.get(this._usersUrl /*, { headers: this._identityService.appendAuthHeader(new Headers()) }*/)\r\n                .map(res => <User[]>res.json())\r\n                .do(data => {\r\n                    this.users = data, //Save the user array inside the service\r\n                    this._lastUserGetTime = Date.now() //Track when the last successful user GET occured\r\n                })\r\n                .catch(this.handleError);\r\n        } else {\r\n            //Return existing users as an observable\r\n            return Observable.of(this.users);\r\n        }\r\n    }\r\n\r\n    public getUserAddresses(user: User): Observable<Address[]> {\r\n        //The token is larger than the entire address payload.\r\n        //If it was a requirement to secure this endpoint, then for performance reasons, it would be best to get all addresses one time\r\n        //Then when looking for the addresses for a single user, do that in memory (but this is a demo, so small API calls are fine)\r\n        let url: string = this._usersUrl + '/' + user.id + '/addresses';\r\n        return this.http.get(url /*, { headers: this._identityService.appendAuthHeader(new Headers()) }*/)\r\n            .map(res => <Address[]>res.json())\r\n            .catch(this.handleError);\r\n    }\r\n\r\n    private handleError(error: Response) {\r\n        // In the future, we may send the server to some remote logging infrastructure\r\n        console.error(error);\r\n        return Observable.throw(error.json().error || 'Server error');\r\n    }\r\n\r\n}"],"sourceRoot":"/source/"}